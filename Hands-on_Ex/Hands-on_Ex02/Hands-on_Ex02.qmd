---
title: "Hands-on Exercise 2 - Beyond ggplot2 Fundamentals"
author: "Alicia Loh"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
---

Learning Objectives:

-   Control the placement of annotation on a graph by using functions provided in ggrepel package,

-   Create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,

-   Plot composite figure by combining ggplot2 graphs by using patchwork package.

# Getting Started

## Installing and loading the required libraries

Besides tidyverse, the following R packages will be used.

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them onto your working R environment.

```{r}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse)
```

## Importing the Data

-   The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is one of the tidyverse package.

```{r}
exam_data <- read_csv("data/Exam_data.csv")
```

**exam_data** tibble data frame contains:

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

# **Beyond ggplot2 Annotation: ggrepel**

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
## Plot

```{r}

#| echo: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Code

```{r}
#| eval: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

## **Working with ggrepel**

[**ggrepel**](https://ggrepel.slowkow.com/) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text seen below. Simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

::: panel-tabset
## Plot

```{r}

#| echo: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Code

```{r}
#| eval: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

::: callout-note
Benefits of ggplot2 over in-built R graphics

-   Automated Legends: Unlike built-in plotting which requires manual legend creation, ggplot2 automatically generates legends based on the data's aesthetics. This streamlines the process, especially for beginners who may find managing legends challenging.

-   Simplified Faceting: ggplot2 simplifies the creation of faceted plots (multiple subplots) compared to base R plotting. The latter can be quite complex, requiring setup with par() and potentially confusing for loops, which might be overwhelming for beginners.

-   Tidy Data Integration: ggplot2 encourages the use of 'tidy data' principles, aligning with how other R tools and packages handle data. This practice helps beginners learn a consistent and widely-adopted approach to data analysis in R.
:::

# **Beyond ggplot2 [Themes](https://ggplot2.tidyverse.org/reference/#themes)**

ggplot2 has eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html):

-   `theme_gray()`

-   `theme_bw()`

-   `theme_classic()`

-   `theme_dark()`

-   `theme_light()`

-   `theme_linedraw()`

-   `theme_minimal()`

-    `theme_void()`.

::: panel-tabset
## Plot

```{r}

#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```

## Code

```{r}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 
```
:::

## **Working with ggtheme package**

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots made by:

-   [Fivethirtyeight](https://fivethirtyeight.com/)

-   [The Economist](https://www.economist.com/graphic-detail)

-   [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/)

-   among others

[*The Economist* theme](https://jrnold.github.io/ggthemes/reference/theme_economist.html) is used below.

::: panel-tabset
## Plot

```{r}

#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## Code

```{r}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::

## **Working with hrbthems package**

[**hrbrthemes**](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

::: panel-tabset
## Plot

```{r}

#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

## Code

```{r}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::

::: callout-note
The second goal centers around productivity for a production workflow, which is the context for where the elements of hrbrthemes should be used.
:::

::: panel-tabset
## Plot

```{r}

#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## Code

```{r}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::

::: callout-note
-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15

-   `grid` argument is used to remove the x-axis grid lines
:::

# **Beyond Single Graph**

Multiple graphs are sometimes required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, a composite plot will be created by combining multiple graphs.

Three statistical graphics are first created via the code chunk below.

## Plot 1: Distribution of Math Scores (Histogram)

::: panel-tabset
## Plot

```{r}

#| echo: false

p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```

## Code

```{r}
#| eval: false

p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```
:::

## Plot 2: Distribution of English Scores (Histogram)

::: panel-tabset
## Plot

```{r}

#| echo: false

p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```

## Code

```{r}
#| eval: false

p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")
```
:::

## Plot 3: English vs Maths score (Scatterplot)

::: panel-tabset
## Plot

```{r}

#| echo: false

p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English vs Maths scores for Primary 3")
```

## Code

```{r}
#| eval: false

p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English vs Maths scores for Primary 3")
```
:::

## **Creating Composite Graphics: pathwork methods**

ggplot2 extension’s functions support composite figures by combining several graphs e.g., [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/) package.

This section uses a ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/)**,** specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax to create layouts. General syntax:

-   Plus Sign "+" - Two-Column Layout

-   Parenthesis "( )" - Create a subplot group.

-   Division Sign "/" - Two-Row Layout

## **Combining two ggplot2 graphs**

Figure in the tabset below shows a composite of two histograms (p1 & p2 from above) created using patchwork.

::: panel-tabset
## Plot

```{r}

#| echo: false

p1 + p2
```

## Code

```{r}
#| eval: false

p1 + p2
```
:::

::: callout-note
Note the syntax simplicity. i.e. `p1 + p2`
:::

## **Combining three ggplot2 graphs**

More complex composites can be achieved by using appropriate operators. For example, the composite figure below uses:

-   “/” - stack two ggplot2 graphs on top of another

-   “\|” - place the plots adjacent to each other

-   “( )” - define plot sequence

::: panel-tabset
## Plot

```{r}

#| echo: false

(p1 / p2) | p3
```

## Code

```{r}
#| eval: false

(p1 / p2) | p3
```
:::

::: callout-note
Refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html). for more modification and layout controls
:::

## **Creating a composite figure with tag**

**patchwork** also provides auto-tagging capabilities to identify subplots in text, as shown in the figure below.

::: panel-tabset
## Plot

```{r}
#| echo: false

((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

## Code

```{r}
#| eval: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```
:::

::: callout-note
Note the I, II, III labels in the subplots have been automatically labelled.
:::

## **Creating figure with insert**

 [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, allows the placement of one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
## Plot

```{r}
#| echo: false

p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

## Code

```{r}
#| eval: false

p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::

## **Creating a composite figure by using patchwork and ggtheme**

**patchwork** and *theme_economist()* of **ggthemes** package are used to create the figure below

## Plot

```{r}
#| echo: false

patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

## Code

```{r}
#| eval: false

patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
:::

[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)
```

## **Geometric Objects: geom_violin**

[`geom_violin`](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

The code below plot the distribution of Maths score by gender in violin plot.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()
```

## **Geometric Objects: geom_point()**

[`geom_point()`](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            
```

## ***Combining geom*** **objects**

The code chunk below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)        
```

# **Essential Grammatical Elements in ggplot2: stat**

The [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:

-   frequency of values of a variable (bar graph)

    -   a mean

    -   a confidence limit

-   There are two ways to use these functions:

    -   add a `stat_()` function and override the default geom, or

    -   add a `geom_()` function and override the default stat.

## **Working with `stat()`**

The boxplots below are incomplete because the positions of the means were not shown.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```

## **Working with stat - the *stat_summary()* method**

The code chunk below adds mean values by using [`stat_summary()`](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun.y="mean",         
               colour ="red",        
               size=4)               
```

## **Working with stat - the `geom()` method**

The code chunk below adding mean values by using `geom_()` function and overriding the default stat.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun.y="mean",           
             colour ="red",          
             size=4)          
```

## **Adding a best fit curve on a scatterplot**

The interpretability of scatterplots can be improved by adding a best fit curve. n the code chunk below, [`geom_smooth()`](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)
```

::: callout-note
The default method used is *loess*.
:::

The default smoothing method can be overridden as shown below.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5)
```

# **Essential Grammatical Elements in ggplot2: Facets**

Facetting generates small multiples (aka trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).

## **Working with `facet_wrap()`**

[`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using `facet-wrap()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)
```

## **`facet_grid()` function**

[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

The code chunk below plots a trellis plot using `facet_grid()`.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)
```

# **Essential Grammatical Elements in ggplot2: Coordinates**

The *Coordinates* functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [coord_cartesian()](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out

-   [coord_flip()](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.

-   [coord_fixed()](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).

-   [coord_quickmap()](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.

## **Working with Coordinate**

By the default, the bar chart of ggplot2 is in vertical form.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()
```

The code chunk below flips the horizontal bar chart into vertical bar chart by using `coord_flip()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()
```

## **Changing the y- and x-axis range**

The scatterplot below is slightly misleading because the y-aixs and x-axis range are not equal.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)
```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))
```

# **Essential Grammatical Elements in ggplot2: themes**

[Themes](https://ggplot2.tidyverse.org/reference/ggtheme.html) control elements of the graph not related to the data. For example:

-   background colour

-   size of fonts

-   gridlines

-   colour of labels

Built-in themes include: - `theme_gray()` (default) - `theme_bw()` - `theme_classic()`

Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).

## **Working with theme**

The code chunk below plot a horizontal bar chart using `theme_gray()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()
```

A horizontal bar chart plotted using `theme_classic()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()
```

A horizontal bar chart plotted using `theme_minimal()`.

```{r}
ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()
```
