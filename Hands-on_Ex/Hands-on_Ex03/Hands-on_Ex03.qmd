---
title: "Hands-on Exercise 3 -  Programming Interactive Data Visualisation with R"
author: "Alicia Loh"
date: "April 20, 2024"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

Learning Objectives:

-   Control the placement of annotation on a graph by using functions provided in ggrepel package,

-   Create professional publication quality figure by using functions provided in ggthemes and hrbrthemes packages,

-   Plot composite figure by combining ggplot2 graphs by using patchwork package.

# Getting Started

## Installing and loading the required libraries

Besides tidyverse, the following R packages will be used.

-   ggrepel: an R package provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: an R package provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: an R package provides typography-centric themes and theme components for ggplot2.

-   patchwork: an R package for preparing composite figure created using ggplot2.

Code chunk below will be used to check if these packages have been installed and also will load them into the working R environment.

```{r,eval=FALSE}
pacman::p_load(ggrepel, patchwork, 
               ggthemes, hrbrthemes,
               tidyverse)
```

## Importing the Data

-   The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is a pacakge within tidyverse.

```{r,eval=FALSE}
exam_data <- read_csv("data/Exam_data.csv")
```

**exam_data** tibble data frame contains:

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

# **Beyond ggplot2 Annotation: ggrepel**

One of the challenge in plotting statistical graph is annotation, especially with large number of data points.

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Code

```{r,eval=FALSE}
#| eval: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label(aes(label = ID), 
             hjust = .5, 
             vjust = -.5) +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

## **Working with ggrepel**

[**ggrepel**](https://ggrepel.slowkow.com/) is an extension of **ggplot2** package which provides `geoms` for **ggplot2** to repel overlapping text seen below. Simply replace `geom_text()` by [`geom_text_repel()`](https://ggrepel.slowkow.com/reference/geom_text_repel.html) and `geom_label()` by [`geom_label_repel`](https://ggrepel.slowkow.com/reference/geom_text_repel.html).

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```

## Code

```{r,eval=FALSE}
#| eval: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  geom_label_repel(aes(label = ID), 
                   fontface = "bold") +
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English scores versus Maths scores for Primary 3")
```
:::

::: callout-note
Benefits of ggplot2 over in-built R graphics

-   Automated Legends: Unlike built-in plotting which requires manual legend creation, ggplot2 automatically generates legends based on the data's aesthetics. This streamlines the process, especially for beginners who may find managing legends challenging.

-   Simplified Faceting: ggplot2 simplifies the creation of faceted plots (multiple subplots) compared to base R plotting. The latter can be quite complex, requiring setup with par() and potentially confusing for loops, which might be overwhelming for beginners.

-   Tidy Data Integration: ggplot2 encourages the use of 'tidy data' principles, aligning with how other R tools and packages handle data. This practice helps beginners learn a consistent and widely-adopted approach to data analysis in R.
:::

# **Beyond ggplot2 [Themes](https://ggplot2.tidyverse.org/reference/#themes)**

ggplot2 has eight [built-in themes](https://ggplot2.tidyverse.org/reference/ggtheme.html):

-   `theme_gray()`

-   `theme_bw()`

-   `theme_classic()`

-   `theme_dark()`

-   `theme_light()`

-   `theme_linedraw()`

-   `theme_minimal()`

-   `theme_void()`

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 

```

## Code

```{r,eval=FALSE}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  theme_gray() +
  ggtitle("Distribution of Maths scores") 

```
:::

## **Working with ggtheme package**

[**ggthemes**](https://cran.r-project.org/web/packages/ggthemes/) provides [‘ggplot2’ themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) that replicate the look of plots made by:

-   [Fivethirtyeight](https://fivethirtyeight.com/)

-   [The Economist](https://www.economist.com/graphic-detail)

-   [The Wall Street Journal](https://www.pinterest.com/wsjgraphics/wsj-graphics/)

-   among others

[*The Economist* theme](https://jrnold.github.io/ggthemes/reference/theme_economist.html) is used below.

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```

## Code

```{r,eval=FALSE}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_economist()
```
:::

## **Working with hrbthems package**

[**hrbrthemes**](https://cinc.rud.is/web/packages/hrbrthemes/) package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used.

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```

## Code

```{r,eval=FALSE}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum()
```
:::

::: callout-note
The second goal centers around productivity for a production workflow, which is the context for where the elements of hrbrthemes should be used.
:::

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```

## Code

```{r,eval=FALSE}
#| eval: false

ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") +
  ggtitle("Distribution of Maths scores") +
  theme_ipsum(axis_title_size = 18,
              base_size = 15,
              grid = "Y")
```
:::

::: callout-note
-   `axis_title_size` argument is used to increase the font size of the axis title to 18,

-   `base_size` argument is used to increase the default axis label to 15

-   `grid` argument is used to remove the x-axis grid lines
:::

# **Beyond Single Graph**

Multiple graphs are sometimes required to tell a compelling visual story. There are several ggplot2 extensions provide functions to compose figure with multiple graphs. In this section, a composite plot will be created by combining multiple graphs.

Three statistical graphics are first created via the code chunk below.

## Plot 1: Distribution of Math Scores (Histogram)

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p1
```

## Code

```{r,eval=FALSE}
#| eval: false

p1 <- ggplot(data=exam_data, 
             aes(x = MATHS)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p1
```
:::

## Plot 2: Distribution of English Scores (Histogram)

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p2
```

## Code

```{r,eval=FALSE}
#| eval: false

p2 <- ggplot(data=exam_data, 
             aes(x = ENGLISH)) +
  geom_histogram(bins=20, 
                 boundary = 100,
                 color="grey25", 
                 fill="grey90") + 
  coord_cartesian(xlim=c(0,100)) +
  ggtitle("Distribution of Maths scores")

p2
```
:::

## Plot 3: English vs Maths score (Scatterplot)

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English vs Maths scores for Primary 3")

p3
```

## Code

```{r,eval=FALSE}
#| eval: false

p3 <- ggplot(data=exam_data, 
             aes(x= MATHS, 
                 y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100)) +
  ggtitle("English vs Maths scores for Primary 3")

p3
```
:::

## **Creating Composite Graphics: pathwork methods**

ggplot2 extension’s functions support composite figures by combining several graphs e.g., [`grid.arrange()`](https://cran.r-project.org/web/packages/gridExtra/vignettes/arrangeGrob.html) of **gridExtra** package and [`plot_grid()`](https://wilkelab.org/cowplot/reference/plot_grid.html) of [**cowplot**](https://wilkelab.org/cowplot/) package.

This section uses a ggplot2 extension called [**patchwork**](https://patchwork.data-imaginist.com/)**,** specially designed for combining separate ggplot2 graphs into a single figure.

Patchwork package has a very simple syntax to create layouts. General syntax:

-   Plus Sign "+" - Two-Column Layout

-   Parenthesis "( )" - Create a subplot group.

-   Division Sign "/" - Two-Row Layout

## **Combining two ggplot2 graphs**

Figure in the tabset below shows a composite of two histograms (p1 & p2 from above) created using patchwork.

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

p1 + p2
```

## Code

```{r,eval=FALSE}
#| eval: false

p1 + p2
```
:::

::: callout-note
Note the syntax simplicity. i.e. `p1 + p2`
:::

## **Combining three ggplot2 graphs**

More complex composites can be achieved by using appropriate operators. For example, the composite figure below uses:

-   “/” - stack two ggplot2 graphs on top of another

-   “\|” - place the plots adjacent to each other

-   “( )” - define plot sequence

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

(p1 / p2) | p3
```

## Code

```{r,eval=FALSE}
#| eval: false

(p1 / p2) | p3
```
:::

::: callout-note
Refer to [Plot Assembly](https://patchwork.data-imaginist.com/articles/guides/assembly.html). for more modification and layout controls
:::

## **Creating a composite figure with tag**

**patchwork** also provides auto-tagging capabilities to identify subplots in text, as shown in the figure below.

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```

## Code

```{r,eval=FALSE}
#| eval: false
((p1 / p2) | p3) + 
  plot_annotation(tag_levels = 'I')
```
:::

::: callout-note
Note the I, II, III labels in the subplots have been automatically labelled.
:::

## **Creating figure with insert**

 [`inset_element()`](https://patchwork.data-imaginist.com/reference/inset_element.html) of **patchwork**, allows the placement of one or several plots or graphic elements freely on top or below another plot.

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```

## Code

```{r,eval=FALSE}
#| eval: false

p3 + inset_element(p2, 
                   left = 0.02, 
                   bottom = 0.7, 
                   right = 0.5, 
                   top = 1)
```
:::

## **Creating a composite figure by using patchwork and ggtheme**

**patchwork** and *theme_economist()* of **ggthemes** package are used to create the figure below

::: panel-tabset
## Plot

```{r,eval=FALSE}
#| echo: false

patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```

## Code

```{r,eval=FALSE}
#| eval: false

patchwork <- (p1 / p2) | p3
patchwork & theme_economist()
```
:::
