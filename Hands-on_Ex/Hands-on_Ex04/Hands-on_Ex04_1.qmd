---
title: "Hands-on Exercise 4 -  Visual Statistical Analysis"
author: "Alicia Loh"
date: "April 27, 2024"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: false
---

Learning Objectives:

-   Create visual graphics with rich statistical information using ggstatsplot package
-   Use performance package to visualise model diagnostics
-   Use parameters package to visualise model parameters

# Getting Started

[**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [**ggplot2**](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

-   To provide alternative statistical inference methods by default

-   To follow besst practices for statistical reporting

-   For all statistical tests resulted in the plots, the default template abides by the [APA gold standard](https://my.ilstu.edu/~jhkahn/apastats.html) for statistical reporting

## Installing and loading the required libraries

The following R packages will be used:

-   [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/)is an extension of ggplot2 package for creating graphics with details from statstical tests included in the plots themselces

-   [**tidyverse**](https://www.tidyverse.org/), a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.

Code chunk below will be used to check if these packages have been installed and also will load them into the working R environment.

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

## Importing the Data

-   The code chunk below imports *exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.

-   **readr** is a pacakge within tidyverse.

```{r}
exam <- read_csv("data/Exam_data.csv")
```

**exam_data** tibble data frame contains:

-   Year end examination grades of a cohort of primary 3 students from a local school.

-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.

    -   The categorical attributes are: ID, CLASS, GENDER and RACE.

    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.

## **One-sample test: *gghistostats()* method**

In the code chunk below, [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build an visual of one-sample test on English scores.

::: panel-tabset
## Plot

```{r,echo=FALSE}
set.seed(1234) # for reproducibility

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

## Code

```{r, eval=FALSE}
set.seed(1234) # for reproducibility

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```
:::

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

## **Unpacking the Bayes Factor**

-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. i.e., a measure of the strength of evidence in favor of one theory among two competing theories.

-    Bayes factor allows evaluation of the data in favor of a null hypothesis, and to use external information to do so. It gives the weight of the evidence in favor of a given hypothesis.

-   When comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10.

```{=html}
<!-- -->
```
-   The [**Schwarz criterion**](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.

### **Interpreting Bayes Factor**

A **Bayes Factor** can be any positive number. A common interpretation was first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013:

| B10 Value  | Conclusion                  |
|------------|-----------------------------|
| \>100      | Extreme evidence for H1     |
| 30-100     | Very strong evidence for H1 |
| 10-30      | Strong evidence for H1      |
| 3-10       | Moderate evidence for H1    |
| 1-3        | Anecdotal evidence for H1   |
| 1          | No evidence                 |
| 1/3-1      | Anecdotal evidence for H1   |
| 1/3-1/10   | Moderate evidence for H1    |
| 1/10-1/30  | Strong evidence for H1      |
| 1/30-1/100 | Very strong evidence for H1 |
| \<1/100    | Extreme evidence for H1     |

## **Two-sample mean test: *ggbetweenstats()***

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

::: panel-tabset
## Plot

```{r, echo=FALSE}

ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

## Code

```{r, eval=FALSE}

ggbetweenstats(
  data = exam,
  x = GENDER, 
  y = MATHS,
  type = "np",
  messages = FALSE
)
```
:::

Default information: - statistical details - Bayes Factor - sample sizes - distribution summary

##  **Oneway ANOVA Test: *ggbetweenstats()* method**

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race.

::: panel-tabset
## Plot

```{r, echo=FALSE}

ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

## Code

```{r, eval=FALSE}

ggbetweenstats(
  data = exam,
  x = RACE, 
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE, 
  pairwise.comparisons = TRUE, 
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```
:::

-   “ns” → only non-significant

-   “s” → only significant

-   “all” → everything

### ggbetweenstats - Summary of tests

Following (between-subjects) tests are carried out for each type of analyses:

| Type           | No. of groups | Test                                            |
|----------------|---------------|-------------------------------------------------|
| Parametric     | \>2           | Fisher's or Welch's one-way ANOVA               |
| Non-parametric | \>2           | Kruskal-Wallis one-way ANOVA                    |
| Robust         | \>2           | Heteroscedastic one-way ANOVA for trimmed means |
| Bayes Factor   | \>2           | Fisher's ANOVA                                  |
| Parametric     | 2             | Student's or Welch's t-test                     |
| Non-parametric | 2             | Mann-Whitney U test                             |
| Robust         | 2             | Yuen's test for trimmed means                   |
| Bayes Factor   | 2             | Student's t-test                                |

Following effect sizes (and confidence intervals) are available for each type of test:

::: panel-tabset
## Plot

```{r, echo=FALSE}
                
```

## Code

```{r, eval=FALSE}
                                  

```
:::

::: callout-tip
For more customisations, refer to [Customizing girafe objects](https://davidgohel.github.io/ggiraph/articles/offcran/customizing.html)
:::

## **Displaying statistics on tooltip**

Code chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.

::: panel-tabset
## Plot

```{r, echo=FALSE}



```

## Code

```{r, eval=FALSE}



```
:::

## **Hover effect with *data_id* aesthetic**

Code chunk below shows the second interactive feature of ggiraph, namely `data_id`.

Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.

::: panel-tabset
## Plot

```{r, echo=FALSE}

                                    
```

## Code

```{r, eval=FALSE}
                               
```
:::

::: callout-tip
The default value of the hover css is *hover_css = “fill:orange;”*.
:::

## Styling hover effect

In the code chunk below, css codes are used to change the highlighting effect.

Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over.

::: panel-tabset
## Plot

```{r, echo=FALSE}
                            
```

## Code

```{r, eval=FALSE}
                                    
```
:::

## Plot 1: **Combining tooltip and hover effect**

The tooltip and hover effects are combined in the interactive statistical graph in the code chunk below.

Elements associated with a *data_id* (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.

::: panel-tabset
## Plot

```{r, echo=FALSE}
                              
```

## Code

```{r, eval=FALSE}
                       
```
:::

## **Click effect with onclick**

`onclick` argument of ggiraph provides hotlink interactivity on the web. Web document link with a data object will be displayed on the web browser upon mouse click.

The code chunk below shown an example of `onclick`.

::: panel-tabset
## Plot

```{r, echo=FALSE}
                                     
```

## Code

```{r, eval=FALSE}
                                  
```
:::

::: callout-tip
Click actions must be a string column in the dataset containing valid javascript instructions.
:::

## **Coordinated Multiple Views with ggiraph**

When a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.

In order to build a coordinated multiple views, thse following programming strategy will be used:

1.  Appropriate interactive functions of **ggiraph** will be used to create the multiple views.

2.  *patchwork* function of [patchwork](https://patchwork.data-imaginist.com/) package will be used inside girafe function to create the interactive coordinated multiple views.

The *data_id* aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.

::: panel-tabset
## Plot

```{r, echo=FALSE}

```

## Code

```{r, eval=FALSE}

```
:::

# **Interactive Data Visualisation - plotly methods!**

Plotly’s R graphing library create interactive web graphics from **ggplot2** graphs and/or a custom interface to the (MIT-licensed) JavaScript library [**plotly.js**](https://plotly.com/javascript/) inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.

## There are two ways to create interactive graph by using plotly, they are:

-   by using *plot_ly()*, and

-   by using *ggplotly()*

## **Creating an interactive scatter plot: plot_ly() method**

The code chunk below shows an example a basic interactive plot created by using *plot_ly()*.

::: panel-tabset
## Plot

```{r, echo=FALSE}

```

## Code

```{r, eval=FALSE}

```
:::

## **Working with visual variable: plot_ly() method**

In the code chunk below, *color* argument is mapped to a qualitative visual variable (i.e. RACE).

::: panel-tabset
## Plot

```{r, echo=FALSE}

```

## Code

```{r, eval=FALSE}

```
:::

## **Creating an interactive scatter plot: ggplotly() method**

The code chunk below plots an interactive scatter plot by using *ggplotly()*.

::: panel-tabset
## Plot

```{r, echo=FALSE}

```

## Code

```{r, eval=FALSE}

```
:::

::: callout-tip
The only extra line you need to include in the code chunk is *ggplotly()*.
:::

## **Interactive Data Visualisation - crosstalk methods**

[Crosstalk](https://rstudio.github.io/crosstalk/) is an add-on to the htmlwidgets package. It extends htmlwidgets with a set of classes, functions, and conventions for implementing cross-widget interactions (currently, linked brushing and filtering).

```{r}

```

## **Linked brushing: crosstalk method**

Code chunk below is used to implement coordinated brushing.

::: panel-tabset
## Plot

```{r, echo=FALSE}
     
```

## Code

```{r, eval=FALSE}
   
```
:::
