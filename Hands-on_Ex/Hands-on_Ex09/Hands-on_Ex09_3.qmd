---
title: "Hands-on Exercise 9 Part III - Heatmap for Visualising and Analysing Multivariate Data"
author: "Alicia Loh"
date: "11 June, 2024"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

Learning Objectives:

-   plot static and interactive heatmap for visualising and analysing multivariate data

# Getting Started

Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.

## Installing and loading the required libraries

The following R packages will be used:

-   seriation

-   heatmaply

-   dendextend

-   tidyverse

Code chunk below will be used to check if these packages have been installed and also will load them into the working R environment.

```{r}
pacman::p_load(seriation, dendextend, heatmaply, tidyverse)
```

## **Importing Data into R**

### **The Data**

The data of [World Happines 2018 report](https://worldhappiness.report/ed/2018/) will be used. The data set is downloaded from [here](https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls). The original data set is in Microsoft Excel format. It has been extracted and saved in csv file called **WHData-2018.csv**.

### **Importing Data**

In the code chunk below, **read_csv()** of *readr* is used to import WHData-2018.csv into R and parsed it into tibble R data frame format.

```{r}
wh <- read_csv("data/WHData-2018.csv")
```

### **Preparing the data**

Change the rows by country name instead of row number by using the code chunk below

```{r}
row.names(wh) <- wh$Country
```

::: callout-note
Notice that the row number has been replaced into the country name.
:::

## **Transforming the data frame into a matrix**

The data was loaded into a data frame, but it has to be a data matrix to make the heatmap.

The code chunk below will be used to transform *wh* data frame into a data matrix.

```{r}
wh1 <- dplyr::select(wh, c(3, 7:12))
wh_matrix <- data.matrix(wh)
```

::: callout-note
Notice that **wh_matrix** is in R matrix format.
:::

## **Static Heatmap**

There are many R packages and functions can be used to drawing static heatmaps, they are:

-   [heatmap()](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/heatmap)of R stats package. It draws a simple heatmap.

-   [heatmap.2()](https://www.rdocumentation.org/packages/gplots/versions/3.0.1.1/topics/heatmap.2) of **gplots** R package. It draws an enhanced heatmap compared to the R base function.

-   [pheatmap()](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12/topics/pheatmap) of [**pheatmap**](https://www.rdocumentation.org/packages/pheatmap/versions/1.0.12) R package. **pheatmap** package also known as Pretty Heatmap. The package provides functions to draws pretty heatmaps and provides more control to change the appearance of heatmaps.

-   [**ComplexHeatmap**](https://bioconductor.org/packages/release/bioc/html/ComplexHeatmap.html) package of R/Bioconductor package. The package draws, annotates and arranges complex heatmaps (very useful for genomic data analysis). The full reference guide of the package is available [here](https://jokergoo.github.io/ComplexHeatmap-reference/book/).

-   [**superheat**](https://cran.r-project.org/web/packages/superheat/) package: A Graphical Tool for Exploring Complex Datasets Using Heatmaps. A system for generating extendable and customizable heatmaps for exploring complex datasets, including big data and data with multiple data types.

### **heatmap() of R Stats**

Plot a heatmap by using *heatmap()* of Base Stats.

::: panel-tabset
## Plot

```{r,echo=FALSE}

wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```

## Code

```{r,eval=FALSE}

wh_heatmap <- heatmap(wh_matrix,
                      Rowv=NA, Colv=NA)
```
:::

::: callout-note
By default, **heatmap()** plots a cluster heatmap. The arguments ***Rowv=NA*** and ***Colv=NA*** are used to switch off the option of plotting the row and column dendrograms.
:::

To plot a cluster heatmap, use the default

::: panel-tabset
## Plot

```{r,echo=FALSE}

wh_heatmap <- heatmap(wh_matrix)
```

## Code

```{r,eval=FALSE}

wh_heatmap <- heatmap(wh_matrix)
```
:::

::: callout-note
The order of both rows and columns is different compared to the native wh_matrix. This is because heatmap does a reordering using clusterisation: it calculates the distance between each pair of rows and columns and try to order them by similarity. Moreover, the corresponding dendrogram are provided beside the heatmap.
:::

Here, red cells denote small values. This heatmap is not really informative. Indeed, the Happiness Score variable have relatively higher values, what makes that the other variables with small values all look the same. Thus, this matrix needs to be normalised. This is done using the *scale* argument. It can be applied to rows or to columns.

The code chunk below normalises the matrix column-wise.

::: panel-tabset
## Plot

```{r,echo=FALSE}
wh_heatmap <- heatmap(wh_matrix,
                      scale="column",
                      cexRow = 0.6, 
                      cexCol = 0.8,
                      margins = c(10, 4))
```

## Code

```{r,eval=FALSE}
wh_heatmap <- heatmap(wh_matrix,
                      scale="column",
                      cexRow = 0.6, 
                      cexCol = 0.8,
                      margins = c(10, 4))
```
:::

::: callout-note
Note that the values are scaled now. Also note that **margins** argument is used to ensure that the entire x-axis labels are displayed completely and, cexRow and cexCol arguments are used to define the font size used for y-axis and x-axis labels respectively.
:::

## **Creating Interactive Heatmap**

[**heatmaply**](http://talgalili.github.io/heatmaply/) is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.

### **Working with heatmaply**

# HERE

::: panel-tabset
## Plot

```{r,echo=FALSE}
# Load the mtcars dataset
data(mtcars)  

# Convert the data frame to a matrix
mtcars_matrix <- as.matrix(mtcars)

# Create the heatmap
heatmaply(mtcars_matrix)
```

## Code

```{r,eval=FALSE}
data(mtcars)
heatmaply(mtcars)
```
:::

The code chunk below shows the basic syntax needed to create n interactive heatmap by using **heatmaply** package.

```{r}
heatmaply(wh_matrix[, -c(1, 2, 4, 5)])
```
