---
title: "In-Class Exercise 6 - "
author: "Alicia Loh"
date: "18 May, 2024"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: false
---

Learning Objectives:

-   create graph object data frames, manipulate them using appropriate functions of *dplyr*, *lubridate*, and *tidygraph*,

-   build network graph visualisation using appropriate functions of *ggraph*,

-   compute network geometrics using *tidygraph*,

-   build advanced graph visualisation by incorporating the network geometrics, and

-   build interactive network visualisation using *visNetwork* package.

# Getting Started

## Installing and loading the required libraries

The following R packages will be used:

-   corporaexplorer

-   stringi

-   rvest

-   readtext

-   tidyverse

Code chunk below will be used to check if these packages have been installed and also will load them into the working R environment.

```{r}
pacman::p_load(corporaexplorer, stringi, rvest, readtext, tidyverse)
```

## **The Data**

Downloading the King James Bible from Project Gutenberg:

### **Importing data**

```{r}
bible <- readr::read_lines("http://www.gutenberg.org/cache/epub/10/pg10.txt")
```

### Collapse into a string

```{r}
bible <- paste(bible, collapse = "\n")
```

### **Identify the beginning and end of the Bible**

Technique borrowed from <https://quanteda.io/articles/pkgdown/replication/digital-humanities.html>

```{r}

start_v <- stri_locate_first_fixed(bible, "The First Book of Moses: Called Genesis")[1]
end_v <- stri_locate_last_fixed(bible, "Amen.")[2]
bible <- stri_sub(bible, start_v, end_v)
```

### **Split string into books**

Every book in the bible is preceded by five newlines, which can be used to split the string into a vector where each element is a book.

```{r}
books <- stri_split_regex(bible, "\n{5}") %>%
    unlist %>%
    .[-40]  
# Removing the heading "The New Testament of the King James Bible"
```

### **Replacing newlines and space**

```{r}
books <- str_replace_all(books, "\n{2,}", "NEW_PARAGRAPH") %>%
    str_replace_all("\n", " ") %>%
    str_replace_all("NEW_PARAGRAPH", "\n\n")
books <- books[3:68]  # The two first elements are not books
```

### **Identifying chapters within books**

```{r}
chapters <- str_replace_all(books, "(\\d+:1 )", "NEW_CHAPTER\\1") %>%
    stri_split_regex("NEW_CHAPTER")
```

### **Remove chapter headings**

```{r}
chapters <- lapply(chapters, function(x) x[-1])
```

### **Retrieve shorter book titles**

Retrieve shorter book titles from esv.org to save space in the corpus map plot.

```{r}
book_titles <- read_html("https://www.esv.org/resources/esv-global-study-bible/list-of-abbreviations") %>%
  html_nodes("td:nth-child(1)") %>%
  html_text() %>%
  .[13:78]  # Removing irrelevant elements after manual inspection.
```

### Identify belonging of book

Indicate whether a book belongs to the Old or New Testament.

```{r}
testament <- c(rep("Old", 39), rep("New", 27))
```

```{r}
# Data frame with one book as one row.
bible_df <- tibble::tibble(Text = chapters,
                           Book = book_titles,
                           Testament = testament)

# Each chapter to be one row, but keep the metadata (which book and which testament).
bible_df <- tidyr::unnest(bible_df, Text)
```

### **Organise Data**

Corpus not organised by date, so `date_based_corpus` to `FALSE`.

```{r}
KJB <- prepare_data(dataset = bible_df,
                    date_based_corpus = FALSE,
                    grouping_variable = "Book",
                    columns_doc_info = c("Testament", "Book"))
```

## **Explore Corpus**

```{r}
explore(KJB)
```

### **Modifying network nodes**

```{r,eval=FALSE}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

### **Modifying edges**

```{r,eval=FALSE}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

## **Creating facet graphs**

```{r,eval=FALSE}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

### **Working with *facet_edges()***

uses *theme()* to change the position of the legend

```{r,eval=FALSE}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

### **A framed facet graph**

Add frame to each graph

```{r,eval=FALSE}
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

### **Working with *facet_nodes()***

```{r,eval=FALSE}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## **Network Metrics Analysis**

```{r,eval=FALSE}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

### **Visualising network metrics**

```{r,eval=FALSE}
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

### **Visualising Community**

```{r,eval=FALSE}
g <- GAStech_graph %>%
  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = community))  

g + theme_graph()
```

## **Building Interactive Network Graph with visNetwork**

### **Data preparation**

```{r,eval=FALSE}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

### **Plotting the first interactive network graph**

```{r,eval=FALSE}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

### **Working with layout**

Fruchterman and Reingold layout is used.

```{r,eval=FALSE}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

### **Working with visual attributes - Nodes**

```{r,eval=FALSE}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

visNetwork shades the nodes by assigning unique colour to each category in the *group* field.

```{r,eval=FALSE}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **Working with visual attributes - Edges**

```{r,eval=FALSE}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

### **Interactivity**

```{r,eval=FALSE}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```
