---
title: "Take-home Exercise 1 Part I - Creating Data Visualisation Beyond Default"
author: "Alicia Loh"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

![](images/clipboard-3122103337.png){width="700"}

# **Context**

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S\$14,000. For families with monthly household income more than S\$14,000, they need to turn to the private residential market.

# **The Task**

Assuming the role of a graphical editor of a median company, a minimum two and maximum three of data visualisations are prepared to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.

# **The Data**

![](images/clipboard-3619198007.png){width="177"}

To accomplish the task, transaction data of [REALIS](https://www.ura.gov.sg/reis/index) will be used.

## Downloading the Dataset

1.  Access Dataset via [**SMU e-library**](https://www-ura-gov-sg.libproxy.smu.edu.sg/reis/ipLoginNotice)\
    [![](images/clipboard-1634732179.png)](images/clipboard-1634732179.png)

2.  After logging in with SMU credentials, navigate to "**Residential**" tab\
    [![](images/clipboard-3969337604.png)](images/clipboard-3969337604.png)

3.  Under **Property Types**, "Select All"

4.  Under **Sale Date**, select "2024 Jan" - "2024 Mar"

5.  Click "Search"

6.  Click "Download"

7.  Due to the size of the dataset, it is split into multiple segments. Download all in .csv format\
    [![](images/clipboard-2283550883.png)](images/clipboard-2283550883.png)

## **The Designing Tool**

The data will be processed using the appropriate **tidyverse** family of packages and the statistical graphics will be prepared using **ggplot2** and its extensions.

# Getting Started

## Installing and loading the required libraries

Note: Ensure that the [pacman](https://cran.r-project.org/web/packages/pacman/) package has already been installed.

The code chunk below loads the following packages using uses `p_load()` of pacman package:

-   [**tidyverse**](https://www.tidyverse.org/): (i.e. readr, tidyr, [dplyr](https://dplyr.tidyverse.org/), [ggplot2](https://ggplot2.tidyverse.org/), [lubridate](https://lubridate.tidyverse.org/)) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics

-   [**reshape2**](https://seananderson.ca/2013/10/19/reshape/) for transforming data between wide and long formats

-   [**ggthemes**](https://ggplot2.tidyverse.org/reference/ggtheme.html): provides some extra themes, geoms, and scales for ‘ggplot2’.

```{r}
pacman::p_load(tidyverse, reshape2, ggthemes)
```

## Importing the Data

-   The data has been split into multiple .csv files

-   **`list.files()`** list all CSV files in the specified directory.

-   After looping through each CSV file, read it into a data frame using **`read_csv()`**, and store it in a list.

-   **`bind_rows()`** combines all data frames in the list into a single big data frame.

```{r}
csv_directory <- "data/"
csv_files <- list.files(csv_directory, pattern = "\\.csv$", full.names = TRUE)

realis <- list()

for (file in csv_files) {
  realis[[file]] <- read_csv(file)
}
```

```{r}
realis_all <- bind_rows(realis)
```

## View Data

-   **`names()`** function prints the names of the columns in the tibble data frame.
-   **`glimpse()`** function gives a quick overview of the tibble data frame

::: panel-tabset
## Column Names

```{r}
col_names <- names(realis_all)
col_names
```

## Overview of Tibble Data Frame

```{r}
glimpse(realis_all)
```
:::

::: callout-note
**realis_all contains:**

-   Public and Private residential property transaction data from 1st January 2023 to 31st March 2024.

-   There are 26,806 rows and 21 columns.
:::

## Data Preparation

### Standardise Date Format

The "Sales Date" column is currently a *cha* type. It needs to be converted into date format.

**`dmy()`** is a function from the [**lubridate**](https://lubridate.tidyverse.org/) package that converts character strings to date format in the day-month-year (DMY) order.

::: panel-tabset
## Standardise Date Format

```{r}
realis_all$`Sale Date` <- dmy(realis_all$`Sale Date`)
```

## View Data

```{r}
head(realis_all$`Sale Date`)
```
:::

### Keep Relevant Rows

Duplicate and empty rows are removed.

```{r}
q1_pte_raw <- realis_all %>%
    distinct() %>%
    drop_na()
```

#### View Data

```{r}
glimpse(q1_pte_raw)
```

::: callout-note
**q1_pte_raw contains:**

-   Private residential property transaction data from 1st January 2023 to 31st March 2024

-   There are 26,800 rows and 21 columns.
:::

### Keep Relevant Columns

Not all 21 columns will be used for analysis e.g. contains overlapping information as another column. Only relevant columns will be kept.

Columns to drop:

-   Area (SQFT): Similar information as Area (SQM)

-   Unit Price (\$ PSF): Similar information as Unit Price (\$ PSM)

-   Nett Price (\$): Similar information as Transacted Price (\$)

-   Postal District and Postal Sector: Overlapping information as Postal Code

Columns to be dropped can be specified by prefixing the column names with a minus sign (-) when using the **`select()`** function from the **`dplyr`** package.

::: panel-tabset
## Keep Relevant Columns

```{r}
q1_pte <- q1_pte_raw %>%
    select(
        -`Area (SQFT)`,
        -`Unit Price ($ PSF)`,
        -`Postal District`,
        -`Postal Sector`
    )
```

## View Data

```{r}
glimpse(q1_pte)
```
:::

::: callout-note
**q1_pte contains:**

-   Private residential property transaction data from 1st January 2024 to 31st March 2024

-   There are 26,800 rows and 14 columns.

-   Columns:

    -   Project Name

    -   Transacted Price (\$)

    -   Sale Date

    -   Address

    -   Type of Sale

    -   Type of Area

    -   Area (SQM)

    -   Unit Price (\$ PSM)

    -   Nett Price

    -   Property Type

    -   Number of Units

    -   Tensure

    -   Completion Date

    -   Purchaser Address Indicator

    -   Postal Code

    -   Planning Region

    -   Planning Area
:::

# Visualisation

There are various types of Properties for Private residences.

```{r}
unique(q1_pte$`Property Type`)
```

The different types in the dataset are:

-   Condominium

-   Terrace House

-   Apartment

-   Executive Condominium

-   Semi-Detached House

-   Detached House

## Price Distribution - Raincloud Plot

A rainbloud plot produces a half-density to a distribution plot. It got its name due to the likeness of its density plot to a shape of a "raincloud". The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities. The raincloud plot shows where densities are clustered.

For better visibility, **`labels`** parameter with the function **`scales::number`**, formats the y-axis labels to include thousands separators.

::: panel-tabset
## Plot

```{r}
#| echo: false

ggplot(q1_pte, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  theme_economist()

```

## Code

```{r}
#| eval: false

ggplot(q1_pte, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
  theme_economist()
```
:::

::: callout-tip
## Write Up

There are six private property types in the dataset.

The boxplot shows Detached Houses generally have the highest transacted prices. The Q1, median, and Q3 values for this property type are all substantially higher than those of other types, indicating its premium market status. Detached Houses also exhibit the highest variability in transacted prices, although there are relatively few outliers.

In contrast, both Executive Condominiums and Terrace Houses demonstrate the least variability in transacted prices, with their interquartile ranges (IQR) closely aligning with their medians. This suggests a stable and consistent pricing trend for these property types.

Executive Condominiums have the lowest transacted prices, indicating their appeal as an affordable option within the private housing market.

Apartments and Condominiums, on the other hand, show a significant number of outliers in their transacted prices, suggesting a wider range of pricing and potentially more diversity in market conditions for these property types.
:::

## Choropleth Map

A choropleth map is useful for visualizing the variation in average property prices across different areas in Singapore. By shading each region according to its average property price, areas with higher or lower prices can be identified, thus revealing patterns and trends in property values across the city-state. This type of map can reveal hotspots of activity and areas with more affordable or expensive property options.

Two data sets will be used to create the map. They are:

-   MPSZ-2019: This data provides the sub-zone boundary of URA Master Plan 2019. It can be downloaded at [data.gov.sg](https://data.gov.sg/) It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2019.

-   Private residential property transaction data from 1st January 2024 to 31st March 2024 in tibble data frame (i.e. `q1_pte`).

The code chunk below loads the following packages:

-   [**tmap**](https://cran.r-project.org/web/packages/tmap/vignettes/tmap-getstarted.html): for thematic mapping

-   [**sf**](https://r-spatial.github.io/sf/): for geospatial data handling

-   [**httr**](https://httr.r-lib.org/): Make HTTP requests and handles web APIs

-   [**future**](https://cran.r-project.org/web/packages/future/index.html): Allows sequential and parallel processing

-   [**furrr**](https://furrr.futureverse.org/): combine purrr’s family of mapping functions (within tidyverse) with future’s parallel processing capabilities

```{r}
pacman::p_load(tmap,sf,httr, future, furrr)

```

### Geospatial Data

|                                      |                                      |
|------------------------------------|------------------------------------|
| ![](images/clipboard-3052492118.png) | ![](images/clipboard-3082063216.png) |

### **Geocoding using Singapore Land Authority (SLA) API**

Geocoding - provide geographical coordinates corresponding to a location.

Parallel processing is set up to speed up the process. Results are saved into a .csv file for easy future access.

```{r}

plan(multisession)

url <- "https://www.onemap.gov.sg/api/common/elastic/search"

postcodes <- unique(q1_pte$`Postal Code`)

# Function to fetch data for a single postal code
fetch_postcode_data <- function(postcode) {
    query <- list('searchVal' = postcode, 'returnGeom' = 'Y', 'getAddrDetails' = 'Y', 'pageNum' = '1')
    res <- GET(url, query = query)
    
    if (http_error(res)) {
        return(NULL) 
    }
    
    content_res <- content(res)
    if (content_res$found != 0) {
        return(data.frame(content_res)[4:13])
    } else {
        return(data.frame(postcode = postcode))
    }
}

results <- future_map(postcodes, fetch_postcode_data)

found <- bind_rows(results, .id = "postcode")

found <- found %>%
    filter(!is.na(postcode))

write.csv(found, file = "data/aspatial/found.csv")
```

::: callout-note
Above code chunk was written with syntax for httr, which has been superseded by [httr2](https://httr2.r-lib.org/). Please make relevant modifications to utilise the newer package.
:::

### Import Geospatial Data

The code chunk below uses the **`st_read()`** function of **`sf`** package to import `MPSZ-2019` shapefile into R as a simple feature data frame called `mpsz`.

::: panel-tabset
## Code

```{r}
#| eval: false
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

## Content

```{r}
#| echo: false
mpsz <- st_read(dsn = "data/geospatial",
                layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```
:::

### Add coordinates

Link postal code to their relevant coordinates. Empty rows are removed. Not all postal codes may have relevant sales during Q1 of 2024.

```{r}
q1_pte_coor <- q1_pte %>%
    left_join(
        found %>% select(results.POSTAL, results.LATITUDE, results.LONGITUDE),
        by = c("Postal Code" = "results.POSTAL")
    ) %>%
    rename(
        Latitude = results.LATITUDE,
        Longitude = results.LONGITUDE
    ) %>%
   filter(!is.na(Longitude) & !is.na(Latitude))
```

### Convert to a sf tibble data frame

```{r}
q1_pte_sf <- st_as_sf(q1_pte_coor,
                       coords = c("Longitude", "Latitude"),
                       crs =4326) %>%
  st_transform(crs = 3414)
```

### Keep relevant columns

```{r}
q1_pte_sf_plot <- q1_pte_sf %>%
    select(-`Project Name`,
           -`Sale Date`,
           -`Address`,
           -`Type of Sale`,
           -`Tenure`,
           -`Completion Date`)
```

### Average Transacted Price by Planning Area

```{r}
avg_txn_px <- q1_pte_sf_plot %>%
    group_by(`Planning Area`) %>%
    summarize(
        Avg_Transacted_Price = mean(`Transacted Price ($)`, na.rm = TRUE)
    )

avg_txn_px <- avg_txn_px %>%
    mutate(`Planning Area` = toupper(`Planning Area`))

avg_txn_px <- st_drop_geometry(avg_txn_px)

```

### Combine avg_txn_px and mpsz

Populates the average transacted price of each planning area into mpsz sf data frame. Not every planning area may have transaction data, so empty rows are dropped.

```{r}
mpsz_avg_txn_px <- mpsz %>%
    left_join(
        avg_txn_px,
        by = c("PLN_AREA_N" = "Planning Area")
    ) %>%
  drop_na()
```

### **Plotting Choropleth Map and Geographical Distribution of Private Properties**

The overall plot shows both the average transacted price of the planning area and the distribution of private residences. If viewing the data separately is preferred, click on the relevant tabs.

::: panel-tabset
## Overall Plot

```{r}
tmap_mode("view")

map <- tm_shape(mpsz_avg_txn_px) +
    tm_polygons(col = "Avg_Transacted_Price", 
                palette = "YlOrRd", 
                alpha = 0.3,
                style = "quantile",
                n = 7) +
    tmap_options(check.and.fix = TRUE) +
    
    tm_shape(q1_pte_sf_plot) +
    tm_dots(col = "Property Type") +

  tm_view(set.zoom.limits = c(11,14))

map

tmap_mode("plot")
```

## Average Transacted Price

```{r}
tmap_mode("view")

map2 <- tm_shape(mpsz_avg_txn_px) +
    tm_polygons(col = "Avg_Transacted_Price", 
                palette = "YlOrRd", 
                alpha = 0.3,
                style = "quantile",
                n = 7) +
    tmap_options(check.and.fix = TRUE) +
  tm_view(set.zoom.limits = c(11,14))

map2

tmap_mode("plot")
```

## Geographic Distribution of Private Property

```{r}
tmap_mode("view")

map3 <- tm_shape(mpsz_avg_txn_px) +
    tm_polygons() +
    tm_shape(q1_pte_sf_plot) +
    tm_dots(col = "Property Type") +

  tm_view(set.zoom.limits = c(11,14))

map3

tmap_mode("plot")
```
:::

::: callout-note
**tmap_mode("view")**:

-   Designed for interactive viewing of spatial data.

-   Enables zooming, panning, and other interactive features, making it easier to explore the data in detail.

**tmap_mode("plot")**:

-   Used for static plotting of spatial data that can be saved as static images e.g., PNG

-   Does not support interactions like zooming and panning.

Setting the mode to plot after the map is generated saves on resources and allows the code to run faster, as the plot does not require continuous updating.
:::

::: callout-tip
## Write Up

The plots reveal that of the private properties sold in Q1 2024, areas with the highest average transaction price are concentrated around the Central Region, including areas like Bukit Timah and Newton. This is likely due to their proximity to the Central Business District (CBD). Although there are very few transactions in Sentosa and Changi, these areas still have high average transaction prices, mainly consisting of condominiums.

Sales of Executive Condominiums, which were previously noted to have the lowest overall transaction price and low transaction price variability, are predominantly located in the outskirts of Singapore, such as Woodlands and Bukit Batok. This suggests a trend toward more affordable options in these areas.

Apartments and condominiums constitute the majority of private residences sold and are distributed throughout the city-state. This extensive distribution may account for the significant number of outliers observed earlier in transaction prices.
:::
