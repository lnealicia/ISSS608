---
title: "Take-home Exercise 1 - Creating Data Visualisation Beyond Default"
author: "Alicia Loh"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: false
---


![](images/clipboard-3122103337.png){width="700"}

# **Context**

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S\$14,000. For families with monthly household income more than S\$14,000, they need to turn to the private residential market.

# **The Task**

Assuming the role of a graphical editor of a median company, a minimum two and maximum three of data visualisations are prepared to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.

# **The Data**

![](images/clipboard-3619198007.png){width="177"}

To accomplish the task, transaction data of [REALIS](https://www.ura.gov.sg/reis/index) will be used.

## Downloading the Dataset

1.  Access Dataset via [**SMU e-library**](https://www-ura-gov-sg.libproxy.smu.edu.sg/reis/ipLoginNotice)\
    [![](images/clipboard-1634732179.png)](images/clipboard-1634732179.png)

2.  After logging in with SMU credentials, navigate to "**Residential**" tab\
    [![](images/clipboard-3969337604.png)](images/clipboard-3969337604.png)

3.  Under **Property Types**, "Select All"

4.  Under **Sale Date**, select "2024 Jan" - "2024 Mar"

5.  Click "Search"

6.  Click "Download"

7.  Due to the size of the dataset, it is split into multiple segments. Download all in .csv format\
    [![](images/clipboard-2283550883.png)](images/clipboard-2283550883.png)

## **The Designing Tool**

The data will be processed using the appropriate **tidyverse** family of packages and the statistical graphics will be prepared using **ggplot2** and its extensions.

# Getting Started

## Installing and loading the required libraries

Note: Ensure that the [pacman](https://cran.r-project.org/web/packages/pacman/) package has already been installed.

The code chunk below loads the following packages using uses `p_load()` of pacman package:

-   [**tidyverse**](https://www.tidyverse.org/): (i.e. readr, tidyr, [dplyr](https://dplyr.tidyverse.org/), [ggplot2](https://ggplot2.tidyverse.org/), [lubridate](https://lubridate.tidyverse.org/)) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics

-   [**reshape2**](https://seananderson.ca/2013/10/19/reshape/) for transforming data between wide and long formats

-   [**ggthemes**](https://ggplot2.tidyverse.org/reference/ggtheme.html): provides some extra themes, geoms, and scales for ‘ggplot2’.

-   [**ggdist**](https://mjskay.github.io/ggdist/): a ggplot2 extension specially designed for visualising distribution and uncertainty

-   [**patchwork**](https://patchwork.data-imaginist.com/articles/guides/assembly.html): an R package for preparing composite figure created using ggplot2.


```{r}
pacman::p_load(tidyverse, reshape2, ggthemes, ggdist, patchwork)
```


## Importing the Data

-   The data has been split into multiple .csv files

-   **`list.files()`** list all CSV files in the specified directory.

-   After looping through each CSV file, read it into a data frame using **`read_csv()`**, and store it in a list.

-   **`bind_rows()`** combines all data frames in the list into a single big data frame.


```{r}
csv_directory <- "data/"
csv_files <- list.files(csv_directory, pattern = "\\.csv$", full.names = TRUE)

realis <- list()

for (file in csv_files) {
  realis[[file]] <- read_csv(file)
}
```

```{r}
realis_all <- bind_rows(realis)
```


## View Data

-   **`names()`** function prints the names of the columns in the tibble data frame.
-   **`glimpse()`** function gives a quick overview of the tibble data frame

::: panel-tabset
## Column Names


```{r}
col_names <- names(realis_all)
col_names
```


## Overview of Tibble Data Frame


```{r}
glimpse(realis_all)
```

:::

::: callout-note
**realis_all contains:**

-   Public and Private residential property transaction data from 1st January 2023 to 31st March 2024.

-   There are 26,806 rows and 21 columns.
:::

## Data Preparation

### Standardise Date Format

The "Sales Date" column is currently a *cha* type. It needs to be converted into date format.

**`dmy()`** is a function from the [**lubridate**](https://lubridate.tidyverse.org/) package that converts character strings to date format in the day-month-year (DMY) order.

::: panel-tabset
## Standardise Date Format


```{r}
realis_all$`Sale Date` <- dmy(realis_all$`Sale Date`)
```


## View Data


```{r}
head(realis_all$`Sale Date`)
```

:::

### Keep Relevant Rows

Duplicate and empty rows are removed.


```{r}
qa_pte_raw <- realis_all %>%
    distinct() %>%
    drop_na()
```


#### View Data


```{r}
glimpse(qa_pte_raw)
```


::: callout-note
**qa_pte_raw contains:**

-   Private residential property transaction data from 1st January 2023 to 31st March 2024

-   There are 26,800 rows and 21 columns.
:::

### Keep Relevant Columns

Not all 21 columns will be used for analysis e.g. contains overlapping information as another column. Only relevant columns will be kept.

Columns to drop:

-   Area (SQFT): Similar information as Area (SQM)

-   Unit Price (\$ PSF): Similar information as Unit Price (\$ PSM)

-   Nett Price (\$): Similar information as Transacted Price (\$)

-   Postal District and Postal Sector: Overlapping information as Postal Code

Columns to be dropped can be specified by prefixing the column names with a minus sign (-) when using the **`select()`** function from the **`dplyr`** package.

::: panel-tabset
## Keep Relevant Columns


```{r}
qa_pte <- qa_pte_raw %>%
    select(
        -`Area (SQFT)`,
        -`Unit Price ($ PSF)`,
        -`Postal District`,
        -`Postal Sector`
    )
```


## View Data


```{r}
glimpse(qa_pte)
```

:::

::: callout-note
**qa_pte contains:**

-   Private residential property transaction data from 1st January 2024 to 31st March 2024

-   There are 26,800 rows and 14 columns.

-   Columns:

    -   Project Name

    -   Transacted Price (\$)

    -   Sale Date

    -   Address

    -   Type of Sale

    -   Type of Area

    -   Area (SQM)

    -   Unit Price (\$ PSM)

    -   Nett Price

    -   Property Type

    -   Number of Units

    -   Tensure

    -   Completion Date

    -   Purchaser Address Indicator

    -   Postal Code

    -   Planning Region

    -   Planning Area
:::

### Separate Data by Quarters

The dataset contains 5 quarters:

-   Quarter 1: 2023 Jan - Mar

-   Quarter 2: 2023 Apr - Jun

-   Quarter 3: 2023 Jul - Sep

-   Quarter 4: 2023 Aug - Dec

-   Quarter 5: 2024 Jan - Mar

To allow for comparison between quarters, qa_pte will be split into the respective quarters by `Sale Date`.


```{r}
q1 <- qa_pte %>%
  filter(`Sale Date` <= "2023-03-31")

q2 <- qa_pte %>%
  filter(`Sale Date` > "2023-03-31" & `Sale Date` <= "2023-06-30")

q3 <- qa_pte %>%
  filter(`Sale Date` > "2023-06-30" & `Sale Date` <= "2023-09-30")

q4 <- qa_pte %>%
  filter(`Sale Date` > "2023-09-30" & `Sale Date` <= "2023-12-31")

q5 <- qa_pte %>%
  filter(`Sale Date` > "2023-12-31")
```


### View Data

::: panel-tabset
## Q1


```{r}
glimpse(q1)
```


## Q2


```{r}
summary(q2)
```


## Q3


```{r}
summary(q3)
```


## Q4


```{r}
summary(q4)
```


## Q5


```{r}
summary(q5)
```

:::

# Visualisation

There are various types of Properties for Private residences.


```{r}
unique(qa_pte$`Property Type`)
```


The different types in the dataset are:

-   Condominium

-   Terrace House

-   Apartment

-   Executive Condominium

-   Semi-Detached House

-   Detached House

## Price Distribution - Raincloud Plot

A raincloud plot produces a half-density to a distribution plot. It got its name due to the likeness of its density plot to a shape of a "raincloud". The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities. The raincloud plot shows where densities are clustered.

For better visibility, **`labels`** parameter with the function **`scales::number`**, formats the y-axis labels to include thousands separators.

The code chunk below plots the price distribution by property type for each quarter and overall.

::: panel-tabset
## All Quarters


```{r}
qa_plot <- ggplot(qa_pte, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  ylim(0, 70000) +
  coord_flip()

qa_plot
```


## 2023 Q1


```{r}
q1_plot <- ggplot(q1, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  ylim(0, 70000) +
  coord_flip()

q1_plot
```


## 2023 Q2


```{r}
q2_plot <- ggplot(q2, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  ylim(0, 70000) +
  coord_flip()
q2_plot
```


## 2023 Q3


```{r}
q3_plot <- ggplot(q3, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  ylim(0, 70000) +
  coord_flip()
q3_plot
```


## 2023 Q4


```{r}
q4_plot <- ggplot(q4, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  ylim(0, 70000) +
  coord_flip()
q4_plot
```


## 2024 Q1


```{r}
q5_plot <- ggplot(q5, 
       aes(x = `Property Type`, 
           y = `Unit Price ($ PSM)`)) +
  stat_halfeye(adjust = 0.5,
               justification = -0.2,
               .width = 0,
               point_colour = NA) +
  geom_boxplot(width = .20,
               outlier.shape = NA) +
  stat_dots(side = "left", 
            justification = 1.2, 
            binwidth = .5,
            dotsize = 1.5) +
  scale_y_continuous(labels = scales::number_format()) +
  ylim(0, 70000) +
  coord_flip()
q5_plot
```

:::

### Composite Plot

Using **`patchwork`** package, the plots for Q1 2023 and Q1 2024 are stacked into 1 composite plot.


```{r}
q1_plot <- q1_plot + labs(title = "Q1 2023")
q5_plot <- q5_plot + labs(title = "Q1 2024")

q1_plot / q5_plot

```


::: callout-tip
## Write Up

Comparing raincloud plots for Q1 2023 and Q1 2024 reveals trends in unit price (\$ PSM) across property types. Minimum prices rose across property types, except for condos, while maximum prices decreased with the exception of executive condos, suggesting overall reduced variability.

In 2023, terrace houses showed the highest variability, followed by condos and apartments. In 2024, apartments exhibited the highest variability, followed by condos and terrace houses. For both quarters, executive condos consistently displayed the least variability.

Median prices for all properties are generally below 20,000, except for apartments in both years.

Interestingly, while price variability remained low for executive condos, in 2023, it clustered around the median and peaked near the 75th quartile. However, in 2024, two main clusters emerged, one between 25^th^ quartile and the median, and another around the 75th quartile.
:::

## Number of Units Sold - Bar Chart

For each quarter, the data is grouped by property type, then summed by the number of units, in order to obtain the number of units sold per quarter.

::: panel-tabset
## 2023 Q1


```{r}

q1_sold <- q1 %>%
  group_by(`Property Type`) %>%
  summarise(Total_Units_Sold = sum(`Number of Units`))

q1_sold
```


## 2023 Q2


```{r}

q2_sold <- q2 %>%
  group_by(`Property Type`) %>%
  summarise(Total_Units_Sold = sum(`Number of Units`))

q2_sold
```


## 2023 Q3


```{r}

q3_sold <- q3 %>%
  group_by(`Property Type`) %>%
  summarise(Total_Units_Sold = sum(`Number of Units`))

q3_sold
```


## 2023 Q4


```{r}

q4_sold <- q4 %>%
  group_by(`Property Type`) %>%
  summarise(Total_Units_Sold = sum(`Number of Units`))

q4_sold
```


## 2024 Q1


```{r}

q5_sold <- q5 %>%
  group_by(`Property Type`) %>%
  summarise(Total_Units_Sold = sum(`Number of Units`))

q5_sold
```

:::

### Bar Chart

Bar chart plots for each quarter is plotted

::: panel-tabset
## 2023 Q1


```{r}
mean_q1 <- mean(q1_sold$Total_Units_Sold)

q1_bar <- ggplot(q1_sold, aes(x = `Property Type`, y = `Total_Units_Sold`)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(x = "Property Type", y = "Number of Units Sold") +
  theme_minimal() +
  ylim(0,2700) +
geom_hline(
    aes(yintercept = mean_q1),
    colour = "darkgreen",
    linewidth = .6,
    linetype = "dashed") +
  annotate(geom = "text",
           x = min(q1_sold$`Property Type`), 
           y = mean_q1 *1.25,
           label = paste0("Mean: ", round(mean_q1, 2)),
           colour = "darkgreen") +
  ggtitle("2023 Q1")

q1_bar
```


## 2023 Q2


```{r}
mean_q2 <- mean(q2_sold$Total_Units_Sold)

q2_bar <- ggplot(q2_sold, aes(x = `Property Type`, y = `Total_Units_Sold`)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(x = "Property Type", y = "Number of Units Sold") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ylim(0,2700) +
geom_hline(
    aes(yintercept = mean_q2),
    colour = "darkgreen",
    linewidth = .6,
    linetype = "dashed") +
  annotate(geom = "text",
           x = min(q2_sold$`Property Type`), 
           y = mean_q2 *1.25,
           label = paste0("Mean: ", round(mean_q2, 2)),
           colour = "darkgreen") +
  ggtitle("2023 Q2")
 q2_bar
```


## 2023 Q3


```{r}
mean_q3 <- mean(q3_sold$Total_Units_Sold)

q3_bar <- ggplot(q3_sold, aes(x = `Property Type`, y = `Total_Units_Sold`)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(x = "Property Type", y = "Number of Units Sold") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ylim(0,2700) +
geom_hline(
    aes(yintercept = mean_q3),
    colour = "darkgreen",
    linewidth = .6,
    linetype = "dashed") +
  annotate(geom = "text",
           x = min(q3_sold$`Property Type`), 
           y = mean_q3 *1.25,
           label = paste0("Mean: ", round(mean_q3, 2)),
           colour = "darkgreen") +
  ggtitle("2023 Q3")
 q3_bar
```


## 2023 Q4


```{r}
mean_q4 <- mean(q4_sold$Total_Units_Sold)

q4_bar <- ggplot(q4_sold, aes(x = `Property Type`, y = `Total_Units_Sold`)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(x = "Property Type", y = "Number of Units Sold") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ylim(0,2700) +
geom_hline(
    aes(yintercept = mean_q4),
    colour = "darkgreen",
    linewidth = .6,
    linetype = "dashed") +
  annotate(geom = "text",
           x = min(q4_sold$`Property Type`), 
           y = mean_q4 *1.25,
           label = paste0("Mean: ", round(mean_q4, 2)),
           colour = "darkgreen") +
  ggtitle("2023 Q4")
 q4_bar
```


## 2024 Q1


```{r}
mean_q5 <- mean(q5_sold$Total_Units_Sold)

q5_bar <- ggplot(q5_sold, aes(x = `Property Type`, y = `Total_Units_Sold`)) +
  geom_bar(stat = "identity", fill = "skyblue") +
  labs(x = "Property Type", y = "Number of Units Sold") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ylim(0,2700) +
geom_hline(
    aes(yintercept = mean_q5),
    colour = "darkgreen",
    linewidth = .6,
    linetype = "dashed") +
  annotate(geom = "text",
           x = min(q5_sold$`Property Type`), 
           y = mean_q5 *1.25,
           label = paste0("Mean: ", round(mean_q5, 2)),
           colour = "darkgreen") +
  ggtitle("2024 Q1")
 q5_bar
```

:::

### Composite Plot

::: panel-tabset
## Plot


```{r}
#| echo: false

q1_bar + q2_bar + q3_bar + q4_bar + q5_bar
```


## Code


```{r}
#| eval: false

q1_bar + q2_bar + q3_bar + q4_bar + q5_bar
```

:::

::: callout-note
## Write Up

## 
:::

