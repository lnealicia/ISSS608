---
title: "Take-home Exercise 1 Part I - Creating Data Visualisation Beyond Default"
author: "Alicia Loh"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
---

![](images/clipboard-3122103337.png){width="700"}

## **Context**

There are two major residential property market in Singapore, namely public and private housing. Public housing aims to meet the basic need of the general public with monthly household income less than or equal to S\$14,000. For families with monthly household income more than S\$14,000, they need to turn to the private residential market.

## **The Task**

Assuming the role of a graphical editor of a median company, a minimum two and maximum three of data visualisations are prepared to reveal the private residential market and sub-markets of Singapore for the 1st quarter of 2024.

## **The Data**

![](images/clipboard-3619198007.png){width="177"}

To accomplish the task, transaction data of [REALIS](https://www.ura.gov.sg/reis/index) will be used.

### Downloading the Dataset

1.  Access Dataset via [**SMU e-library**](https://www-ura-gov-sg.libproxy.smu.edu.sg/reis/ipLoginNotice)\
    [![](images/clipboard-1634732179.png)](images/clipboard-1634732179.png)

2.  After logging in with SMU credentials, navigate to "**Residential**" tab\
    [![](images/clipboard-3969337604.png)](images/clipboard-3969337604.png)

3.  Under **Property Types**, "Select All"

4.  Under **Sale Date**, select "2023 Jan" - "2024 Mar"

5.  Click "Search"

6.  Click "Download"

7.  Due to the size of the dataset, it is split into multiple segments. Download all in .csv format\
    [![](images/clipboard-2283550883.png)](images/clipboard-2283550883.png)

## **The Designing Tool**

The data will be processed using the appropriate **tidyverse** family of packages and the statistical graphics will be prepared using **ggplot2** and its extensions.

# Getting Started

## Installing and loading the required libraries

Note: Ensure that the [pacman](https://cran.r-project.org/web/packages/pacman/) package has already been installed.

The code chunk below uses `p_load()` of pacman package to check if the listed packages are installed in the computer. If they are, then they will be launched into R. Otherwise, tidyverse will be installed and launched into R.

-   [**tidyverse**](https://www.tidyverse.org/): (i.e. readr, tidyr, [dplyr](https://dplyr.tidyverse.org/), ggplot2, [lubridate](https://lubridate.tidyverse.org/)) for performing data science tasks such as importing, tidying, and wrangling data, as well as creating graphics based on The Grammar of Graphics

-   [**reshape2**](https://seananderson.ca/2013/10/19/reshape/) for transforming data between wide and long formats

-   [**ggridges**](https://cran.r-project.org/web/packages/ggridges/vignettes/introduction.html) for creating ridgeline plots

-   [**ggdist**](https://mjskay.github.io/ggdist/) for visualising distributions and uncertainty

-   ggrepel: provides geoms for ggplot2 to repel overlapping text labels.

-   ggthemes: provides some extra themes, geoms, and scales for ‘ggplot2’.

-   hrbrthemes: provides typography-centric themes and theme components for ggplot2.

-   patchwork: preparing composite figure created using ggplot2

```{r}
pacman::p_load(tidyverse, reshape2, ggridges, ggdist,
               ggrepel, ggthemes, hrbrthemes, patchwork)
```

## Importing the Data

-   The data has been split into 5 .csv files

-   Define the path to the directory containing the CSV files.

-   Use **`list.files()`** to list all CSV files in the specified directory.

-   Loop through each CSV file, read it into a data frame using **`read_csv()`**, and store it in a list.

-   Use **`bind_rows()`** to combine all data frames in the list into a single big data frame.

```{r}
csv_directory <- "data/"
csv_files <- list.files(csv_directory, pattern = "\\.csv$", full.names = TRUE)

realis <- list()

for (file in csv_files) {
  realis[[file]] <- read_csv(file)
}
```

```{r}
realis_all <- bind_rows(realis)
```

### View Data

-   Use the **`names()`** function to print the names of the columns in the tibble data frame.

```{r}
col_names <- names(realis_all)
col_names
```

-   Use the **`glimpse()`** function to get a quick overview of the tibble data frame

```{r}
glimpse(realis_all)
```

::: callout-note
**realis_all contains:**

-   Public and Private residential property transaction data from 1st January 2023 to 31st March 2024.

-   There are 26806 rows and 21 columns.
:::

## Data Preparation

The task only requires data from the private residential market and sub-markets of Singapore for the 1st quarter of 2024.

### Standardise Date Column Format

The "Sales Date" column is currently a *cha* type. It needs to be converted into date format.

dmy() is a function from the lubridate package that converts character strings to date format in the day-month-year (DMY) order.

Verify column type

```{r}
class(realis_all$`Sale Date`)
```

Standardise Date Format and verify column type after standardisation

```{r}

realis_all$`Sale Date` <- dmy(realis_all$`Sale Date`)
class(realis_all$`Sale Date`)
```

Check data

```{r}

head(realis_all$`Sale Date`)
```

### Keep only relevant rows

Filter and keep only rows that:

-   Sales Date that occur within Q1 2024 i.e. between 01 Jan 2024 to 31 Mar 2024 inclusive.

-   Purchaser Address Indicator not equal to "HDB"

In addition, any duplicate or empty rows are also removed.

```{r}
q1_pte_raw <- realis_all %>%
    filter(`Sale Date` >= as.Date("2024-01-01") & 
          `Sale Date` <= as.Date("2024-03-31"),
          `Purchaser Address Indicator` != "HDB") %>%
    distinct() %>%
    drop_na()
```

### View Data

```{r}
glimpse(q1_pte_raw)
```

::: callout-note
**q1_pte_raw contains:**

-   Private residential property transaction data from 1st January 2024 to 31st March 2024

-   There are 3567 rows and 21 columns.
:::

### Keep only relevant columns

Not all 21 columns will be used for analysis e.g. irrelevant, contains overlapping information as another column. Only relevant columns will be kept.

Columns to drop:

-   Type of Area: Not used in analysis

-   Area (SQM): Similar information as Area (SQFT)

-   Unit Price (\$ PSM): Similar information as Unit Price (\$ PSF)

-   Nett Price (\$): Similar information as Transacted Price (\$)

-   Purchaser Address Indicator: Not used in analysis

-   Postal District and Postal Sector: Overlapping information as Postal Code

The **`select()`** function is used to choose the columns to keep. However, by prefixing the column names with a minus sign (**`-`**), the function will drop the specified columns instead.

```{r}
q1_pte <- q1_pte_raw %>%
    select(
        -`Type of Area`,
        -`Area (SQM)`,
        -`Unit Price ($ PSM)`,
        -`Nett Price($)`,
        -`Purchaser Address Indicator`,
        -`Postal District`,
        -`Postal Sector`
    )
```

### View Data

```{r}
glimpse(q1_pte)
```

::: callout-note
**q1_pte contains:**

-   Private residential property transaction data from 1st January 2024 to 31st March 2024

-   There are 3567 rows and 14 columns.
:::

## Visualisation

### Group by Property Type

There are various types of Properties for Private residences.

```{r}
unique(q1_pte$`Property Type`)
```

::: callout-note
The different types in the dataset are:

-   Condominium

-   Terrace House

-   Apartment

-   Executive Condominium

-   Semi-Detached House

-   Detached House
:::

To allow for more in depth analysis of each Property Type, **`q1_pte`** tibble data frame is split into a list of smaller tibbles based on "Property Type".

-   **`group_by()`** groups the **`q1_pte`** tibble data frame by the "Property Type" column.

-   **`group_split()`** splits the grouped data frame into a list of smaller tibbles based on "Property Type."

-   **`group_keys()`** retrieves the values of the grouping column ("Property Type") for each group.

-   **`setNames()`** is used to create a named list where each element of the list is one of the smaller tibbles, and each tibble is named according to the corresponding value of the "Property Type" column.

```{r}
grouped_q1_pte <- q1_pte %>%
    group_by(`Property Type`)

tibble_list <- group_split(grouped_q1_pte)
ppty_type_name <- group_keys(grouped_q1_pte)$`Property Type`
ppty_type_name <- setNames(tibble_list, ppty_type_name)

```

### View Data

The tabset below allows the view of the newly created smaller Property Type tibble

```{r}
ppty_type_name
```

Geographical Distribution:

Choropleth Map: Use a map to visualize property sales and prices across different districts or areas in Singapore. This can reveal hotspots of activity and areas with higher or lower average prices.

Sales Heatmap: Create a heatmap showing the density of property transactions in different areas. This can provide insights into which parts of Singapore are seeing the most activity in the private residential market.
