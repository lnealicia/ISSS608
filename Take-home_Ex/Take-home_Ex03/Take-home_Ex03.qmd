---
title: "Take-home Exercise 3 - Vast Challenge 2024"
author: "Alicia Loh"
date: "May 10, 2024"
date-modified: last-modified
execute: 
  eval: true
  echo: true
  warning: false
  freeze: false
---

# **The Source**

The task is taken from the [VAST Challenge 2024](https://vast-challenge.github.io/2024/). Questions from [Mini Case 3: Temporal Analysis](https://vast-challenge.github.io/2024/MC3.html) will be completed.

# Challenge Overview

![](data/Oceanus%20Information/Oceanus%20Location.png){width="288"}

![](data/Oceanus%20Information/Oceanus%20Geography.png){width="308"}

Welcome to Oceanus, an island nation with a healthy market for commercial fishing. Most companies in the region are united in following regulations and implementing sustainable fishing practices. But there are a few companies who are willing to cross ethical lines to increase their catch and their profits. Luckily, FishEye International maintains a watchful eye on fishing data. Their dedicated analysts have been processing data from various sources into a knowledge graph that they call CatchNet: the Oceanus Knowledge Graph.

# **The Task**

![](images/clipboard-587959097.png){width="320"}

Mini-challenge 3 concerns visualizing changes in business relationships within the commercial fishing industry. FishEye wants to understand how companies react to the closure of a competitor caught fishing illegally and how these changes affect influence networks. Design visualizations to show these changes over time and identify companies that may benefit from illegal fishing

Apply appropriate visual analytics methods to help FishEye, a non-profit organization that focuses on illegal fishing, to better identify bias, track behavior changes, and infer temporal patterns from the knowledge graphs prepared by their data analysts.

This take home exercise is done in conjunction with the group project. My group members are [Keke](https://isss608keke.netlify.app/) and [Quek You Ting](https://isss608ytquek.netlify.app/).

## Background

The business community in Oceanus is dynamic with new startups, mergers, acquisitions, and investments. FishEye International closely watches business records to keep tabs on commercial fishing operators. FishEye’s goal is to identify and prevent illegal fishing in the region’s sensitive marine ecosystem. Analysts are working with company records that show ownership, shareholders, transactions, and information about the typical products and services of each entity. FishEye’s analysts have a hybrid automated/manual process to transform the data into CatchNet: the Oceanus Knowledge Graph.

In the past year, Oceanus’s commercial fishing business community was rocked by the news that SouthSeafood Express Corp was caught fishing illegally. FishEye wants to understand temporal patterns and infer what may be happening in Oceanus’s fishing marketplace because of SouthSeafood Express Corp’s illegal behavior and eventual closure. The competitive nature of Oceanus’s fishing market may cause some businesses to react aggressively to capture SouthSeafood Express Corp’s business while other reactions may come from the awareness that illegal fishing does not go undetected and unpunished.

## Tasks and Questions:

A key element in stopping illegal fishing is holding the people who own nefarious companies accountable. Thus, FishEye is keenly interested in developing visualization tools that work with CatchNet to identify the people who hold influence over business networks. That is especially difficult with varied and changing shareholder and ownership relationships.

1.  FishEye analysts want to better visualize changes in corporate structures over time. Create a visual analytics approach that analysts can use to highlight temporal patterns and changes in corporate structures. Examine the most active people and businesses using visual analytics.

2.  Using your visualizations, find and display examples of typical and atypical business transactions (e.g., mergers, acquisitions, etc.). Can you infer the motivations behind changes in their activity?

3.  Develop a visual approach to examine inferences. Infer how the influence of a company changes through time. Can you infer ownership or influence that a network may have?

4.  Identify the network associated with SouthSeafood Express Corp and visualize how this network and competing businesses change as a result of their illegal fishing behavior. Which companies benefited from SouthSeafood Express Corp legal troubles? Are there other suspicious transactions that may be related to illegal fishing? Provide visual evidence for your conclusions.

Note: the VAST challenge is focused on visual analytics and graphical figures should be included with your response to each question. Please include a reasonable number of figures for each question (no more than about 6) and keep written responses as brief as possible (around 250 words per question). Participants are encouraged to new visual representations rather than relying on traditional or existing approaches.

**Reflection Questions**

-   Which version of the data did you choose to work with and why? Did you download more than one version and change course during the challenge?

-   Given the task to develop visualizations for knowledge graphs, did you find that the challenge pushed you to develop new techniques for visual representation?

-   Did you participate in last year’s challenge? If so, did your experience last year help prepare you for this year’s challenge?

-   What was the most difficult part of working on this year’s data and what could have made it more accessible?

# Getting Started

## Installing and loading the required libraries

Note: Ensure that the [pacman](https://cran.r-project.org/web/packages/pacman/) package has already been installed.

The following R packages will be used:

-   tidytext

-   tidyverse

-   readtext

-   quanteda

-   jsonlite

-   igraph

-   tidygraph

-   ggraph

-   visNetwork

-   [clock](https://cran.r-project.org/web/packages/clock/index.html)

```{r}
pacman::p_load(tidytext, readtext, quanteda, tidyverse, jsonlite, igraph, tidygraph, ggraph, visNetwork, clock, graphlayouts)
```

## **Importing JSON File**

Direct import of the mc3.json file shows an error message indicating that there's an invalid character in the JSON text, specifically "NaN". As "NaN" is not recognised as a valid value, preprocessing of the JSON file to replace "NaN" is required.

```{r}
# Read the JSON file as text
json_text <- readLines("data/mc3.json")

# Replace "NaN" with "null"
json_text_fixed <- gsub("NaN", "null", json_text)

# Write the fixed JSON text back to a file
writeLines(json_text_fixed, "data/mc3_fixed.json")
```

Importing preprocessed mc3_fixed.json file

```{r}
mc3_data <- fromJSON("data/mc3_fixed.json")
```

Check dataframe

-   Opens new tabs within R workspace, not shown in website

-   Example of the view is shown in the screenshot tab below

::: panel-tabset
## Code

```{r}
view(mc3_data[["nodes"]])
view(mc3_data[["links"]])
```

## Screenshot Example

mc3_data\[\["nodes'\]

![](images/clipboard-1212461262.png)

![](images/clipboard-3963926457.png)

mc3_data\[\["links"\]\]

![](images/clipboard-2580708180.png)

![](images/clipboard-3147037567.png)
:::

View dataframe

-   Similar info as shown above

```{r}
glimpse(mc3_data)
```

::: callout-note
mc3_date\[\["nodes"\]\] dataframe contains 15 columns and 60520 rows.

mc3_date\[\["links"\]\] dataframe contains 11 columns and 75817 rows.
:::

::: callout-note
On closer inspection of `mc3_data`, we note some issues to be rectified:

1.  Columns containing dates are treated as “Character” data type instead of *date* data type, which is incorrect. Thus, the data type of the following fields need to be changed to “Date”” data type:
    -   founding_date
    -   \_last_edited_date
    -   \_date_added
    -   start_date
    -   \_last_edited_date
    -   \_date_added
    -   dob
2.  Some columns have missing values, which need to be handled appropriately for ease of later analysis.
:::

## Missing Values

Identify the percentage of missing values within the dataset

```{r}
# Function to calculate missing value percentages
calculate_missing_percentage <- function(df) {
  total_values <- nrow(df) * ncol(df)
  missing_values <- sum(is.na(df))
  missing_percentage <- (missing_values / total_values) * 100
  return(missing_percentage)
}
```

::: panel-tabset
## Nodes

```{r}
nodes_missing_percentage <- calculate_missing_percentage(mc3_data[["nodes"]])
nodes_missing_percentage

nodes_missing_by_column <- sapply(mc3_data[["nodes"]], function(x) sum(is.na(x)) / length(x) * 100)
nodes_missing_by_column
```

## Links

```{r}
links_missing_percentage <- calculate_missing_percentage(mc3_data[["links"]])
links_missing_percentage

links_missing_by_column <- sapply(mc3_data[["links"]], function(x) sum(is.na(x)) / length(x) * 100)
links_missing_by_column
```
:::

::: callout-note
Nodes: Overall, there are 35.12% missing values. While most columns have no missing values, the majority of those with missing data pertain to optional attributes:

-   ProductServices (Optional) - 85.34%

-   PointOfContact (Optional)- 85.38%

-   HeadofOrg (Optional) - 85.36%

-   founding_date - 85.34%

-   revenue (Optional) - 85.37%

-   TradeDescription (Optional) - 85.34%

-   dob - 14.66%

Links: Overall, there are 9.06% missing values. Most of the columns do not contain missing values, except for:

-   start_date - 0.12%

-   end_date (Optional) - 99.54%

In addition, according to the *VAST2024 - MC3 Data Description* file, all empty values are supposed to have been set to 0. However, there are still some values with "NA".
:::

### Setting empty values in *`revenue`* to 0

```{r}
mc3_data$nodes$revenue <- ifelse(is.na(mc3_data$nodes$revenue) | mc3_data$nodes$revenue == "", 0, mc3_data$nodes$revenue)
```

Verify changes

```{r}
# ensure no more missing values in revenue column
sum(is.na(mc3_data$nodes$revenue))
```

### Drop unnecessary columns

A decision was made to drop the *`end_date`* column due to the sheer number of missing values:

```{r}
mc3_data$links <- subset(mc3_data$links, select = -end_date)
```

Verify changes

```{r}
colnames(mc3_data$links)
```

## Data Wrangling

### **Wrangling Time**

-   *dmy()* is a function of **lubridate** package under tidyverse

-   *dmy()* transforms the date columns to Date data type.

-   Missing values can cause issues during date conversion, thus need to be appropriately handled

-   **`lapply()`** is used to iterate over dataframes (i.e. nodes and links) within the **`mc3_data`** list and applies the necessary mutations to handle missing values and convert date columns.
