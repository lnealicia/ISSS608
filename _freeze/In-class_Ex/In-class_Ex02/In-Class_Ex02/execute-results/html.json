{
  "hash": "dbd75f76a73d4176b18531a4f96aa12f",
  "result": {
    "markdown": "---\ntitle: \"In-Class Exercise 2 - Visualising Distribution\"\nauthor: \"Alicia Loh\"\ndate: \"April 20, 2024\"\ndate-modified: last-modified\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# Learning Objectives:\n\n-   Statistical graphic methods for visualising distribution using ggplot2 and its extensions for:\n\n    -   Ridgeline plot\n\n    -   Raincloud plot\n\n# Getting Started\n\n## Loading R packages\n\nNote: Ensure that the [pacman](https://cran.r-project.org/web/packages/pacman/) package has already been installed.\n\nThe code chunk below uses [`p_load()`](https://www.rdocumentation.org/packages/pacman/versions/0.5.1/topics/p_load) of pacman package to load the tidyverse family of packages.\n\n-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots,\n\n-   ggdist, a ggplot2 extension spacially desgin for visualising distribution and uncertainty,\n\n-   tidyverse, a family of R packages to meet the modern data science and visual communication needs,\n\n-   ggthemes, a ggplot extension that provides the user additional themes, scales, and geoms for the ggplots package, and\n\n-   colorspace, an R package provides a broad toolbox for selecting individual colors or color palettes, manipulating these colors, and employing them in various kinds of visualisations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n```\n:::\n\n\n## Importing the Data\n\n-   The code chunk below imports *Exam_data.csv* into R environment by using [*read_csv()*](https://readr.tidyverse.org/reference/read_delim.html) function of [**readr**](https://readr.tidyverse.org/) package.\n\n-   **readr** is one of the tidyverse package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_df <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n**exam_data contains:**\n\n-   Year end examination grades of a cohort of primary 3 students from a local school.\n\n-   There are a total of seven attributes. Four of them are categorical data type and the other three are in continuous data type.\n\n    -   The categorical attributes are: ID, CLASS, GENDER and RACE.\n\n    -   The continuous attributes are: MATHS, ENGLISH and SCIENCE.\n\n# ggplot\n\n[ggplot2](https://ggplot2.tidyverse.org/) is an R package for **declaratively** creating **data-driven** graphics based on ***The Grammar of Graphics***. It is also part of the tidyverse family specially designed for visual exploration and communication.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_df, aes(x = ENGLISH)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"skyblue\") +\n  ggtitle(\"Distribution of English scores\")\n```\n:::\n\n:::\n\n# Probability Density Plot\n\nMore appropriate method to represent continuous values\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_df, aes(x = ENGLISH)) +\n  geom_density(color=\"skyblue\", \n               adjust = .65,\n               alpha = .1) +\n  ggtitle(\"Probability Density Plot of English scores\")\n```\n:::\n\n:::\n\n# Density Plot with Summary Statistics\n\nThe code chunk below includes a probability density plot (violet) and normal distribution plot (gray). The mean (green) and median (blue) of the data is also plotted.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian_eng <- median(exam_df$ENGLISH)\nmean_eng <- mean(exam_df$ENGLISH)\nstd_eng <- sd(exam_df$ENGLISH)\n\n\n# Probability Density Plot\nggplot(data=exam_df, aes(x = ENGLISH)) +\n  geom_density(color=\"violet\", \n               adjust = .65,\n               alpha = .1) +\n  stat_function( # Normal Distribution Plot\n    fun = dnorm,\n    args = list(mean = mean_eng, sd = std_eng),\n    col = \"gray\",\n    linewidth = .8) +\n  geom_vline( # Mean line\n    aes(xintercept = mean_eng),\n    colour = \"darkgreen\",\n    linewidth = .6,\n    linetype = \"dashed\") +\n  annotate(geom = \"text\",\n           x = mean_eng -8,\n           y = .04,\n           label = paste0(\"Mean: \",\n                          round((mean_eng),2)),\n           colour=\"darkgreen\") +\n  geom_vline( # Median Line\n    aes(xintercept = median_eng),\n    colour = \"navy\",\n    linewidth = .6,\n    linetype = \"dashed\") +\n  annotate(geom = \"text\",\n           x = median_eng +8,\n           y = .04,\n           label = paste0(\"Median: \",\n                          round((mean_eng),2)),\n           colour=\"navy\") +\n  ggtitle(\"Density Plot with Summary Statistics of English Scores\")\n```\n:::\n\n:::\n\n# Ridgeline Plot\n\n[*Ridgeline plot*](https://www.data-to-viz.com/graph/ridgeline.html) (i.e. *Joyplot*) reveals the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nggridges package provides two main geom to plot gridgeline plots:\n\n-    [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) \n\n    -   takes height values directly to draw the ridgelines\n\n-    [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html).\n\n    -   first estimates data densities and then draws those using ridgelines\n\nCode chunk below shows a ridgelines plot of distribution of English score by class using `geom_density_ridges()`\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n::: callout-note\n-   Used when:\n\n    -   Number of groups to represent is medium to high (e.g. \\>5), thus\n\n        -   Classic window separation take up too much space\n\n        -   Overlap in the groups allows more efficient use of space\n\n    -   There is a clear pattern in the result, e.g., obvious ranking in groups\n:::\n\n## Varying Fill Colours along the X-axis\n\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis.\n\nTo achieve varying fill colours:\n\n-   [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)\n\n-   [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html)\n\nHowever, they do not allow for alpha transparency.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [°C]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English Grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## Mapping Probabilities directly onto colour\n\nStat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n:::\n\n::: callout-important\nInclude the argument `calc_ecdf = TRUE` in `stat_density_ridges()`!\n:::\n\n### Ridgeline Plots with Quantile Lines\n\nRidgeline plots can be coloured by quantile using [`geom_density_ridges_gradient()`](geom_density_ridges_gradient()), via the calculated `stat(quantile)` \n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n:::\n\nQuantiles can also be specified by cut points e.g. 2.5% and 97.5% tails to colour the ridgeline plot.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n:::\n\n# Raincloud Plot\n\nA data visualisation technique that produces a half-density to a distribution plot. It got its name due to the likeness of the density plot to a shape of a \"raincloud\". The raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The raincloud plot shows where densities are clustered.\n\nIt is created by using functions provided by **ggdist** and ggplot2 packages.\n\n## Plotting a Half Eye graph\n\nPlot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package, producing a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-note\nRemove the slab interval by setting .width = 0 and point_colour = NA.\n:::\n\n## **Adding the boxplot**\n\nThe second geometry layer i.e. a narrow boxplot is produced using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2 This produces a narrow boxplot.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n:::\n\n## **Adding the Dot Plots**\n\nThe third geometry layer is added using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, similar to a histogram that indicates the number of samples (number of dots) in each bin. Use `side = “left”` to specify the dot plots on the left-hand side.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n:::\n\n## **Finishing touch**\n\n [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package is used to flip the raincloud chart horizontally to give it the raincloud appearance. `theme_economist()` of ggthemes package is also used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n## Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](In-Class_Ex02_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam_df, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n:::\n",
    "supporting": [
      "In-Class_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}